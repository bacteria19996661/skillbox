# Модуль 13. Задача 6. Яйца
#
# Уровень опасности для черепашьих яиц рассчитывается по формуле:
# D = x^3 − 3x^2 − 12x + 10, где x — глубина кладки в метрах,
# а D — уровень опасности в условных единицах.
#
# Напишите программу, находящую такое значение глубины х,
# при котором уровень опасности как можно более близок к нулю.
# На вход программе подаётся максимально допустимое отклонение уровня опасности от нуля,
# а программа должна рассчитать приблизительное значение х, удовлетворяющее этому отклонению.
# Известно, что глубина точно больше нуля и меньше четырёх метров. Обеспечьте контроль ввода.
#
# Пример:
# Введите максимально допустимый уровень опасности: 0.01
# Приблизительная глубина безопасной кладки: 0.732421875 м
#
# Что оценивается
# Результат вывода соответствует условию.
# Input содержит корректное приглашение для ввода.
# Формат вывода соответствует примеру.
# Вывод содержит описание результата (выведенные числа сопровождаются текстовым описанием).
#
# x**3 - 3 * x**2 - 12 * x + (10 - D) = 0
# x1 = 5
# x2 = -(math.sqrt(3) + 1)
# x3 = math.sqrt(3) - 1



import math
import matplotlib.pyplot as plt
import numpy as np



x1 = 5 # Первый корень уравнения нахожу графическим методом
x2 = -(math.sqrt(3) + 1) # Остальные два корня уравнения нахожу по обобщенной теореме Виета


def is_normal(D: float) -> bool:
    return abs(D) > 1



def f(x, D):
    y = x ** 3 - 3 * x ** 2 - 12 * x + (10 - D)
    return y



def root_x3(D):
    if is_normal(D):
        raise ValueError("Ошибка значения допустимого отклонения: |D| < 1.")

    x3 = (D - 10) / (x1 * x2)

    return x3



def graph() -> object:
    fig, ax = plt.subplots()
    # Добавим заголовок графика
    ax.set_title('График функции')
    # Название оси X:
    ax.set_xlabel('x')
    # Название оси Y:
    ax.set_ylabel('y')
    # Начало и конец изменения значения X, разбитое на 100 точек
    x = np.linspace(-3, 6, 1000)  # X от -3 до 6
    # Построение y = x**3 - 3 * x**2 - 12 * x + (10 - D)
    y = f(x, D)
    # Вывод графика
    ax.plot(x, y)
    plt.show()



if __name__ == '__main__':
    try:
        D = float(input('Введите допустимое отклонение от нуля D : '))
        x = root_x3(D)
        y = f(x, D)
        print(f"x = {x}\nf(x) = {y}")
        # print(matplotlib.get_backend())
        graph()

    except ValueError as e:
        print(e)
