# Модуль 9. Задание 8. Метод бутерброда - обратная задача

# Напишите программу-шифратор, которая шифровала бы введённые сообщения «методом бутерброда».

input_phrase = 'Как видно, в литеральной форме кортеж python 3 записывается в виде последовательности элементов в круглых скобках, в то время как для списков характерны квадратные. Некоторые особенности кортежей: они упорядочены по позициям; tuple могут хранить и содержать внутри себя объекты любых типов (и даже составных); доступ к элементам происходит по смещению, а не по ключу; в рамках этой структуры данных определены все операции, основанные на применении смещения (индексирование, срез); кортежи поддерживают неограниченное количество уровней вложенности; кортежи хранят указатели на другие объекты, а значит их можно представлять, как массивы ссылок; они позволяют очень просто менять местами значения двух переменных. Зачем использовать кортеж вместо списка? Тем, кто уже успел познакомиться со списками в Python, может показаться не очевидным смысл использования кортежей. Ведь фактически, списки могут делать всё то же самое и даже больше. Это вполне естественный вопрос, но, разумеется, у создателей языка найдётся на него ответ: Неизменяемость — именно это свойство кортежей, порой, может выгодно отличать их от списков. Скорость — кортежи быстрее работают. По причине неизменяемости кортежи хранятся в памяти особым образом, поэтому операции с их элементами выполняются заведомо быстрее, чем с компонентами списка. Безопасность — неизменяемость также позволяет им быть идеальными кандидатами на роль констант. Константы, заданные кортежами, позволяют сделать код более читаемым и безопасным. Использование tuple в других структурах данных — кортежи применимы в отдельных структурах данных, от которых python требует неизменяемых значений. Например ключи словарей (dicts) должны состоять исключительно из данных immutable-типа.'

res = ''

length_in = len(input_phrase)

for i in range(length_in // 2):
    res += input_phrase[i]
print(res)

tmp = ''

for i in range(length_in - 1, length_in // 2 - 1, - 1):
    tmp += input_phrase[i]
print(tmp, '\n')

output_phrase = ''
i = 1

for i in range(length_in // 2):
    output_phrase += res[i]
    output_phrase += tmp[i]
if length_in % 2:
    output_phrase += tmp[i + 1]

print(f"ШИФР:\n {output_phrase}", '\n')