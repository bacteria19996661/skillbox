# Часть 2. Модуль 2. Практическая работа. Задание 5. Контейнеры
#
# Напишите программу, которая получает на вход невозрастающую последовательность натуральных чисел.
# Они означают массу каждого контейнера в ряду. После этого вводится число X — масса нового контейнера.
# Программа выводит номер, под которым будет лежать новый контейнер.
# Если в ряду есть контейнеры с массой, как у нового, то его нужно положить после них.
#
# Обеспечьте контроль ввода: все числа не превышают 200.
#
# Пример:
# Количество контейнеров: 8
# Введите вес контейнера: 165
# Введите вес контейнера: 163
# Введите вес контейнера: 160
# Введите вес контейнера: 160
# Введите вес контейнера: 157
# Введите вес контейнера: 157
# Введите вес контейнера: 155
# Введите вес контейнера: 154
# Введите вес нового контейнера: 162
# Номер, который получит новый контейнер: 3
#
# Что оценивается
# Результат вычислений корректен.
# Input содержит корректные приглашения для ввода.
# Формат вывода соответствует примеру.
# Переменные и функции имеют значащие имена, не только a, b, c, d. Подробнее об этом — в видео 2.3.



n = int(input('Сколько ящиков будем добавлять?: '))

weight_list = []

for i in range(n):
    weight = int(input(f"Сколько весит {i+1}-й ящик?: "))
    weight_list.append(weight)

weight_list.sort()
print(f"Ящики упорядочены: {weight_list}")

new_weight = int(input('Сколько весит новый ящик?: '))

id = 0

for i, elem in enumerate(weight_list):
    if new_weight < elem:
        id = i
        break
    elif new_weight == elem:
        id += 1
    else:
        if new_weight > weight_list[-1]:
            id = len(weight_list)

weight_list.insert(id, new_weight)    # добавляю новый ящик в место его веса

print(f"Номер, который получит новый ящик: {id}\nНовый список: {weight_list}")
