# Часть 2. Модуль 2. Практическая работа. Задание 8. Сортировка
#
# Дан список из N чисел. Напишите программу, которая сортирует элементы списка
# по возрастанию и выводит их на экран. Дополнительный список использовать нельзя.
#
# Постарайтесь придумать и написать как можно более эффективный алгоритм сортировки.
#
# Пример:
# Изначальный список: [1, 4, –3, 0, 10]
# Отсортированный список: [–3, 0, 1, 4, 10]
#
# Что оценивается
# Результат вычислений корректен.
# Input содержит корректные приглашения для ввода.
# Формат вывода соответствует примеру.
# Переменные и функции имеют значащие имена, не только a, b, c, d. Подробнее об этом — в видео 2.3.
#
#
#
# Сортировка выбором (selection sort) — на каждом шаге находит минимальный или максимальный элемент
# из неотсортированной части списка и помещает его в начало или конец отсортированной части.
# Устойчивый, ограниченно эффективен.


def selection_sort(some_list: float):
    id_min = 0
    for id_min in range(len(some_list)):
        for id_curr in range(id_min, len(some_list)):
            if some_list[id_curr] < some_list[id_min]:
                some_list[id_curr], some_list[id_min] = some_list[id_min], some_list[id_curr]

    return some_list


if __name__ == '__main__':
    # some_list = [9, 96.56, -37, 3, -27.39, 50, 1, 19.29, 15, 4, -5.3, 2, 0, -70.07, 48, 2, 37.72, 63, -3, -77.29, 86, 1, 26.33, 4, 7, 4.84, 12, 9, -66.73, -74]
    some_list = [4, 8, 5, 6, 9, 1, 3, 2, 7]

    result = selection_sort(some_list)

    print(f"\nИсходный список:\n[4, 8, 5, 6, 9, 1, 3, 2, 7]\n"
          f"\nАлгоритм сортировки выбором:\n{result}")
