#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Часть 2. Модуль 13. Практическая работа. Задача 1. Квадраты чисел
#
# Пользователь вводит число N. Напишите программу, которая генерирует последовательность
# из квадратов чисел от 1 до N (1 ** 2, 2 ** 2, 3 ** 2 и так далее). Реализацию напишите
# тремя способами: класс-итератор, функция-генератор и генераторное выражение.
#
# Что оценивается
# Результат вычислений корректен.
# Input содержит корректные приглашения для ввода.
# Модели реализованы в стиле ООП, основной функционал описан в методах классов и в отдельных функциях.
# При написании классов соблюдаются основные принципы ООП: инкапсуляция, наследование и полиморфизм.
# Для получения и установки значений у приватных атрибутов используются сеттеры и геттеры.
# Для создания нового класса на основе уже существующего используется наследование.
# Сообщения о процессе получения результата осмыслены и понятны для пользователя.
# Переменные, функции и собственные методы классов имеют значащие имена (не a, b, c, d).
# Классы и методы/функции имеют прописанную документацию.
# Есть аннотация типов для методов/функций и их аргументов (кроме args и kwargs).
# Если функция/метод ничего не возвращает, то используется None.


# класс-итератор
class Squares:
    def __init__(self, num):
        self.count = 0
        self.num = num

    def __iter__(self):
        self.count = 0
        return self

    def __next__(self):
        self.count += 1
        if self.count > self.num:
            raise StopIteration('StopIteration')

        return self.count ** 2


# функция-генератор
def squares_func(number):
    for n in range(1, number + 1):
        yield n ** 2


if __name__ == '__main__':
    number = int(input('Введите целое число: '))
    squares = Squares(number)

    # генераторное выражение
    squares_gen = (num ** 2 for num in range(1, number + 1))
    squares_f = squares_func(number)

    print(f'Квадраты чисел до {number}:')

    print("Класс-итератор:")
    for el in squares:
        print(el, end=' ')

    print("\nФункция-генератор:")
    for el in squares_f:
        print(el, end=' ')

    print("\nГенераторное выражение:")
    for el in squares_gen:
        print(el, end=' ')
