# Часть 2. Модуль 8. Практическая работа. Задача 5. Список списков — 2
#
# Вы уже работали с многомерными списками и решали задачи, где с помощью
# list comprehensions «выпрямляли» многомерные списки в один.
# Это не получится, если списков неограниченное количество и у элементов разные уровни вложенности.
#
# Дан такой список:
# nice_list = [1, 2, [3, 4], [[5, 6, 7], [8, 9, 10]], [[11, 12, 13], [14, 15], [16, 17, 18]]]
#
# Напишите рекурсивную функцию, которая раскрывает все вложенные списки, то есть оставляет только внешний список.
# Ответ: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
#
# Функция должна получать список и возвращать его раскрытую версию
# (не нужно добавлять элементы в список, записанный в глобальную переменную, созданную снаружи функции).
#
# Подсказка
# Можно возвращать списки и срезы списков.
#
# Что оценивается
# Результат вычислений корректен.
# Формат вывода соответствует примеру.
# Основной функционал описан в отдельной функции(-ях).
# Переменные и функции имеют значимые имена, не только a, b, c, d.

def unpack(structure):
    if isinstance(structure, tuple):
        structure = list(structure)
    if structure == []:
        return structure
    if isinstance(structure[0], (list, tuple)):
        return unpack(structure[0]) + unpack(structure[1:])
    return structure[:1] + unpack(structure[1:])


if __name__ == '__main__':
    test_cases = [
        [[1, 2, [3]], [1], 3],                         # Ответ в консоли: 10
        (1, 2, 3, 4, 5),                               # Ответ в консоли: 15
        [[1, 2, [3], (11, (12, 15, 16), 13)], [1], 3], # Ответ в консоли: 77
        (1, (10, 20, [400, 500, 600], 30), 3, 4, 5)    # Ответ в консоли: 1573
    ]

    for sample in test_cases:
        print(f"Распакованная в список конструкция: {unpack(sample)}")




# Решение только для списков:
#
# def unpack(some_list: list):
#     if some_list == []:
#         return some_list
#     if isinstance(some_list[0], list):
#         return unpack(some_list[0]) + unpack(some_list[1:])
#     return some_list[:1] + unpack(some_list[1:])
#
# my_list = [1, 2, [3, 4], [[5, 6, 7], [8, 9, 10]], [[11, 12, 13], [14, 15], [16, 17, 18]]]
# print(unpack(my_list))