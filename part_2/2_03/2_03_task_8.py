# Часть 2. Модуль 2. Практическая работа. Задание 8. Симметричная последовательность
#
# Последовательность чисел называется симметричной, если она одинаково читается как слева направо,
# так и справа налево. Например, следующие последовательности являются симметричными:
#
# 1 2 3 4 5 4 3 2 1
# 1 2 1 2 2 1 2 1
#
# Пользователь вводит последовательность из N чисел.
# Напишите программу, которая определяет, какое минимальное количество и каких чисел
# нужно добавить в конец этой последовательности, чтобы она стала симметричной.
#
# Пример 1:
# Количество чисел: 5
# Число: 1
# Число: 2
# Число: 1
# Число: 2
# Число: 2
# Последовательность: [1, 2, 1, 2, 2]
# Нужно приписать чисел: 3
# Сами числа: [1, 2, 1]
#
# Пример 2:
# Количество чисел: 5
# Число: 1
# Число: 2
# Число: 3
# Число: 4
# Число: 5
# Последовательность: [1, 2, 3, 4, 5]
# Нужно приписать чисел: 4
# Сами числа: [4, 3, 2, 1]
#
# Что оценивается
# Результат вычислений корректен.
# Input содержит корректные приглашения для ввода.
# Формат вывода соответствует примеру.
# Переменные и функции имеют значимые имена, не только a, b, c, d.
# Советы и рекомендации
# Убедитесь что ваш алгоритм работает с разными последовательностями, например с такими:
# [1, 2, 1] — в этом случае ничего добавлять не нужно.
# [1, 2, 3, 4, 3] — в этом случае надо добавить минимум, то есть числа 2 и 1.
# [::-1] - реверс, [:n-1] - срез до предпоследнего элемента

some_list, simm_list = [], []
def is_simm(some_list):

    l = len(some_list) // 2
    count = 0

    for i in range(l):
        if some_list[i] == some_list[len(some_list) - 1 - i]:
            count += 1

    if count == l:
        return True
    else:
        return False

def add_simm(some_list):
    if is_simm(some_list):
        print(f"Последовательность {some_list} уже является симметричной. Ничего не нужно добавлять.")
        exit()

    n = len(some_list)
    slice = some_list[:n-1]
    temp_list = some_list + slice[::-1]

    for i in range(n, 2*n-1):
        if is_simm(temp_list):
            simm_list = temp_list[::]
            del temp_list[i]
        else:
            break

    return simm_list

if __name__ == '__main__':

    test_cases = [
        [1, 2, 1, 2, 2],
        [1, 2, 3, 4, 5],
        [1, 2, 3, 4, 3],
        [1, 2, 1]
    ]

    for some_list in test_cases:
        result = add_simm(some_list)

        print(f"Исходная     последовательность : {some_list}\n"
              f"Симметричная последовательность : {result}\n"
              f"Нужно прописать чисел           : {len(result) - len(some_list)}\n"
              f"Сами числа                      : {result[len(some_list):]}\n")
