# Часть 2. Модуль 7. Практическая работа. Задача 7. Своя функция zip
#
# Даны строка и кортеж из чисел. Напишите программу, которая создаёт генератор из пар кортежей «символ
# — число». Затем выведите на экран сам генератор и кортежи.
#
# Пример:
# Строка: abcd
# Кортеж чисел: (10, 20, 30, 40)
# Результат:
# <generator object <genexpr> at 0x00000204A4234048>
# ('a', 10)
# ('b', 20)
# ('c', 30)
# ('d', 40)
#
# Дополнительно: создайте полный аналог функции zip — сделайте так, чтобы программа
# работала с любыми итерируемыми типами данных.
#
# Подсказка
# Ранее мы проходили List comprehensions — по сути, генератор списка.
# В этом случае, чтобы создать генератор, попробуйте поэкспериментировать с генератором списка.
#
# Пример:
# print([i for i in range(10)])
# print((i for i in range(10)))
#
# Что оценивается
# Результат вычислений корректен.
# Формат вывода соответствует примеру.
# Основной функционал описан в отдельной функции или функциях.
# Переменные и функции имеют значимые имена, не только a, b, c, d.

import random

n = random.randint(1, 10)
some_string = "".join([random.choice([chr(x) for x in range(97, 122)]) for _ in range(n)])
some_tuple = tuple(random.randint(0, 100) for _ in range(n))

gen_tup = ((some_string[i], some_tuple[i]) for i in range(n))

print(gen_tup)
for el in gen_tup:
    print(el)
