#!/usr/bin/python
# -*- coding: utf-8 -*-
# Часть 2. Модуль 12. Практическая работа. Задача 1. Налоги
#
# Реализуйте иерархию классов, описывающих имущество налогоплательщиков.
# Она должна состоять из базового класса Property и производных от него классов Apartment, Car и CountryHouse.
#
# Базовый класс должен иметь атрибут worth (стоимость), который передаётся в конструктор,
# и метод расчёта налога, переопределённый в каждом из производных классов.
# Налог на квартиру вычисляется как 1/1000 её стоимости, на машину — 1/200, на дачу — 1/500.
#
# Каждый дочерний класс должен иметь конструктор с одним параметром,
# передающий свой параметр конструктору базового класса.
#
# Разработайте интерфейс программы. Пусть она запрашивает у пользователя
# количество его денег и стоимость имущества, а затем выдаёт налог
# на соответствующее имущество и показывает, сколько денег ему не хватает (если это так).
#
# Что оценивается
# Результат вычислений корректен.
# Input содержит корректные приглашения для ввода.
# Модели реализованы в стиле ООП, основной функционал описан в методах классов и отдельных функциях.
# При написании классов соблюдаются основные принципы ООП: инкапсуляция, наследование и полиморфизм.
# Для получения и установки значений у приватных атрибутов используются сеттеры и геттеры.
# Для создания нового класса на основе уже существующего используется наследование.
# Сообщения о процессе получения результата осмысленны и понятны пользователю.
# Переменные, функции и собственные методы классов имеют значащие имена, а не a, b, c, d.
# Классы и методы/функции имеют прописанную документацию.
#
# Что оценивается в практической работе
# Задание сдано через GitLab.
# Структура папок и файлов репозитория соответствует репозиторию python_basic.
# Все задачи выполнены в соответствующих папках и файлах main.py.
# Описания коммитов осмысленны и понятны: 111, done, «я сделалъ» — неверно;
# added m15 homework, 14.3 fix: variables naming — верно.
# Использованы именованные индексы, а не просто i (подробнее — в видео 7.2).
# Использованы правильные числа, без дополнительных действий со стороны пользователя,
# без +1 (подробнее — в видео 7.4).
# Правильно оформлен input, без пустого приветствия для ввода (подробнее — в видео 2.3).
# Переменные и функции имеют значащие имена, а не только a, b, c, d (подробнее — в видео 2.3).
# Присутствуют пробелы после запятых и при бинарных операциях.
# Отсутствуют пробелы после имён функций и перед скобками: print (), input () — неверно; print() — верно.
# Правильно оформлены блоки if-elif-else, циклы и функции, отступы одинаковы во всех блоках одного уровня.
# Все входные и выходные файлы называются так, как указано в заданиях.
# Работа с файлами осуществляется с помощью контекстного менеджера with.
# Для обработки исключений используются блоки try-except.
# Модели реализованы в стиле ООП, основной функционал описан в методах классов и отдельных функциях.
# При написании классов соблюдаются основные принципы ООП: инкапсуляция, наследование и полиморфизм.
# Для получения и установки значений у приватных атрибутов используются сеттеры и геттеры.
# Для создания нового класса на основе уже существующего используется наследование.
# Если классы вынесены в отдельный модуль, то импортируются определённые классы
# (запись вида from garden import * считается плохим тоном).
# Классы и методы/функции имеют прописанную документацию.

class Property:
    worth = 0
    """
    Базовый класс, описывающий имущество налогоплательщиков

    Args:
        worth (float): стоимость имущества

    Attributes:
        worth (float): стоимость имущества - атрибут, который передаётся в конструктор
    """
    def __init__(self, worth):
        self.worth = worth

    def __str__(self):
        return 'Размер налога на {} = {}'.format(self.__class__.__name__, self.tax_calc())

    def tax_calc(self):     # метод расчёта налога
        pass


class Apartment(Property):
    __percent_value = 1000
    """
    Класс Квартира. Родитель Property
    
    Args:
        worth (float): стоимость имущества
        
    Attributes:
        __percent_value (int): коэффициент налогового сбора
    """
    def __init__(self, worth):
        """
        Конструктор с одним параметром, передающим этот параметр конструктору базового класса
        :param worth (float): стоимость квартиры
        """
        super().__init__(worth)
        self.worth = worth

    def get_percent_value(self):
        """
        геттер для получения коэффициента налогового сбора
        :return: __percent_value
        rtype: int
        """
        return self.__percent_value

    def tax_calc(self):     # Налог на квартиру вычисляется как 1/1000 её стоимости
        return self.worth / self.__percent_value


class Car(Property):
    __percent_value = 200
    """
    Класс Машина. Родитель Property

    Args:
        worth (float): стоимость имущества

    Attributes:
        __percent_value (int): коэффициент налогового сбора
    """
    def __init__(self, worth):
        """
        Конструктор с одним параметром, передающим этот параметр конструктору базового класса
        :param worth (float): стоимость машины
        """
        super().__init__(worth)
        self.worth = worth

    def get_percent_value(self):
        """
        геттер для получения коэффициента налогового сбора
        :return: __percent_value
        rtype: int
        """
        return self.__percent_value

    def tax_calc(self):     # Налог на машину вычисляется как 1/200 её стоимости
        return self.worth / self.__percent_value


class CountryHouse(Property):
    __percent_value = 500
    """
    Класс Дача. Родитель Property

    Args:
        worth (float): стоимость имущества

    Attributes:
        __percent_value (int): коэффициент налогового сбора
    """
    def __init__(self, worth):
        """
        Конструктор с одним параметром, передающим этот параметр конструктору базового класса
        :param worth (float): стоимость дачи
        """
        super().__init__(worth)
        self.worth = worth

    def get_percent_value(self):
        """
        геттер для получения коэффициента налогового сбора
        :return: __percent_value
        rtype: int
        """
        return self.__percent_value

    def tax_calc(self):     # Налог на дачу вычисляется как 1/500 её стоимости
        return self.worth / self.__percent_value


if __name__ == '__main__':

    amount_money = float(input('Сколько у вас денег? Введите сумму: '))
    worth_apartment = float(input('Какова стоимость квартиры? Введите сумму: '))
    worth_car = float(input('Какова стоимость машины? Введите сумму: '))
    worth_country_house = float(input('Какова стоимость дачи? Введите сумму: '))

    apartment = Apartment(worth_apartment)
    car = Car(worth_car)
    country_house = CountryHouse(worth_country_house)

    print(f"Размер налога на квартиру: {apartment.tax_calc():.2f}")    # выдаёт налог на квартиру
    print(f"Размер налога на машину: {car.tax_calc():.2f}")    # выдаёт налог на машину
    print(f"Размер налога на дачу: {country_house.tax_calc():.2f}")    # выдаёт налог на дачу

    all_sum = apartment.tax_calc() + car.tax_calc() + country_house.tax_calc()
    print(f"Вам нужно заплатить {all_sum:.2f} рублей.")
    if all_sum > amount_money:    # показывает, сколько денег не хватает
        print(f"Вам не хватает {abs(amount_money - all_sum)} рублей, чтобы оплатить налоги.")
