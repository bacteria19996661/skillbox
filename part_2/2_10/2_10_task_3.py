# Часть 2. Модуль 10. Практическая работа. Задача 3. Регистрация
#
# У вас есть файл с протоколом регистрации пользователей на сайте — registrations.txt.
# Каждая строка содержит имя, имейл и возраст, разделённые пробелами.
# Например: Василий test@test.ru 27.
#
# Напишите программу, которая проверяет данные из файла для каждой строки:
#
# Присутствуют все три поля.
# Поле «Имя» содержит только буквы.
# Поле «Имейл» содержит @ и точку.
# Поле «Возраст» представляет число от 10 до 99.
# В результате проверки сформируйте два файла:
#
# registrations_good.log для правильных данных; записывать строки как есть;
# registrations_bad.log — для ошибочных; записывать строку и вид ошибки.
# Для валидации строки данных напишите функцию, которая может выдавать исключения:
#
# НЕ присутствуют все три поля: IndexError.
# Поле «Имя» содержит НЕ только буквы: NameError.
# Поле «Имейл» НЕ содержит @ и точку: SyntaxError.
# Поле «Возраст» НЕ представляет число от 10 до 99: ValueError.
# Формат выходных данных
#
# Содержимое файла registrations_bad.log:
# Ольга kmrn@gmail.com 123        Поле «Возраст» НЕ представляет число от 10 до 99
# Чехова kb@gmail.com 142        Поле «Возраст» НЕ представляет число от 10 до 99
# ……
# Степан ky 59        Поле «Имейл» НЕ содержит @ и точку
# ……
# Содержимое файла registrations_good.log:
# Геннадий ttdababmt@gmail.com 69
# Ольга ysbxur@gmail.com 20
# ……
#
# Советы и рекомендации
# Помните, что пайтон не всегда будет выполнять операции, которые вы предполагали, например:
# if '1' and '2' in строка — по приоритету операций сперва будет выполнено действие с in, а уже потом and.
# Значит, пайтон не будет в этом случае искать 1 внутри строки.
# Элементы а, б, с: разделять объект (например, список) на несколько переменных очень удобно
# при помощи множественного присваивания. Но если элементов в списке окажется меньше,
# чем указанных переменных, то появится ошибка.
# При необходимости вы можете объединять исключения в except-блоке.
# Для этого нужно перечислить классы исключений, которые вы хотите отследить в кортеже:
# except (DrunkError, CarCrashError...) as exc
#     As exc в данном случае сработает так же, как и с файлами в конструкции with open(...) as file.
#     То есть пайтон запишет пойманное исключение в переменную с названием exc (название может быть любым).
# При переезде зачастую нужно вынести много коробок с вещами из дома.
# Если для переноса каждой коробки придётся открывать/закрывать двери, то на это уйдет много сил.
# Их уйдет меньше, если получится открыть двери один раз и закрыть, когда всё будет сделано.
# То же самое справедливо и для файлов. Старайтесь открывать и закрывать их экономно, например,
# открыть файлы можно до цикла, а закрыть — после (если нет необходимости переоткрывать файл внутри цикла).
#
# Что оценивается
# Результат вычислений корректен.
# Формат вывода соответствует примеру.
# Основной функционал описан в отдельных функциях.
# Переменные и функции имеют значащие имена, а не только a, b, c, d (подробнее об этом в видео 2.3).
# Входные и выходные файлы названы так, как указано в задании.

line_number = 0
def check_contacts(some_list):
    if len(temp_list) < 3:
        regs_file_bad.write(f"{line} Ошибка в строке {line_number}: Не заполнено имя, e-mail или возраст.\n")
    elif not temp_list[0].isalpha():
        regs_file_bad.write(f"{line} Ошибка в строке {line_number}: «Имя» содержит не только буквы.\n")
    elif ('.' or '@') not in temp_list[1]:
        regs_file_bad.write(f"{line} Ошибка в строке {line_number}: e-mail не содержит @ и/или точку.\n")
    elif not (10 <= int(temp_list[2]) <= 99):
        regs_file_bad.write(f"{line} Ошибка в строке {line_number}: «Возраст» не соответствует допустимому.\n")
    else:
        regs_file_good.write(f"{line}")


try:
    with open('registrations.txt', 'r') as regs_file, \
        open('registrations_good.log', 'a') as regs_file_good, \
        open('registrations_bad.log', 'a') as regs_file_bad:

        for line in regs_file:
            line_number += 1
            temp_list = line.split()
            check_contacts(temp_list)

except (FileNotFoundError, FileExistsError) as exc:
    print(exc)
except IndexError as exc:
    print(exc)
