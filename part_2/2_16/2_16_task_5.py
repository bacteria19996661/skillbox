#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Часть 2. Модуль 16. Практическая работа. Задача 5. Синглтон
#
# Синглтон — это порождающий паттерн проектирования, который гарантирует,
# что у класса есть только один экземпляр, и предоставляет к этому экземпляру
# глобальную точку доступа. Синглтонами мы уже пользовались, к ним относятся,
# например, None, True и False. Благодаря тому, что None — синглтон,
# можно использовать оператор is: он возвращает True только для объектов,
# представляющих одну и ту же сущность.
#
# Реализуйте декоратор singleton, который превращает класс в одноэлементный.
# При множественной инициализации объекта этого класса будет сохранён только первый инстанс,
# а все остальные попытки создания будут возвращать первый экземпляр.
#
# Пример кода:
#
# @singleton
# class Example:
#     pass
#
# my_obj = Example()
# my_another_obj = Example()
#
# print(id(my_obj))
# print(id(my_another_obj))
#
# print(my_obj is my_another_obj)
# Результат:
# 1986890616688
# 1986890616688
# True
#
# Что оценивается в задаче
# Результат вычислений корректен.
# Формат вывода соответствует примеру.
# Переменные, функции и собственные методы классов имеют значащие имена (не a, b, c, d).
# Классы и методы/функции имеют прописанную документацию.
# Есть аннотация типов для методов/функций и их аргументов (кроме args и kwargs).
# Если функция или метод ничего не возвращает, то используется None.

def singleton(cls):
    """ Декоратор класса.
        Декоратор класса работатет только с его инстансом (элемент класса my_obj)
            и не затрагивает содержимое самого класса.
    """

    instances = {}    # Словарь для хранения экземпляров класса

    def wrapper(*args, **kwargs):
        if cls not in instances:    # Если экземпляр еще не создан
            instances[cls] = cls(*args, **kwargs)    # создаем его и сохраняем
        return instances[cls]

    return wrapper


@singleton
class Example:
    pass


my_obj = Example()
my_another_obj = Example()

print(id(my_obj))
print(id(my_another_obj))
print(my_obj is my_another_obj)



# ПРИМЕР реализации через класс:
# В Python можно реализовать паттерн синглтон с использованием класса и атрибута класса.
# Пример простой реализации синглтона на Python:
#
# class Singleton:
#     _instance = None
#
#     def __new__(cls):
#         if cls._instance is None:
#             cls._instance = super(Singleton, cls).__new__(cls)
#             cls._instance.init_singleton()
#         return cls._instance
#
#     def init_singleton(self):
#         # Этот метод может быть использован для инициализации экземпляра синглтона.
#         pass
#
# # Пример использования синглтона:
# s1 = Singleton()
# s1.some_attribute = "Hello, I'm a Singleton!"
#
# s2 = Singleton()
#
# print(s1.some_attribute)  # Вывод: "Hello, I'm a Singleton!"
# print(s2.some_attribute)  # Вывод: "Hello, I'm a Singleton!"
#
# print(s1 is s2)  # Вывод: True (s1 и s2 - это один и тот же экземпляр синглтона)
#
# В этом примере _instance является статическим атрибутом класса,
# который хранит единственный экземпляр синглтона.
# Метод __new__ проверяет, существует ли уже экземпляр синглтона,
# и если нет, то создает его и сохраняет в _instance.
# Последующие вызовы Singleton() возвращают тот же экземпляр.
#
# Обратите внимание, что метод init_singleton может быть использован
# для инициализации экземпляра синглтона, если это необходимо.
# Вы можете добавить дополнительные методы и атрибуты по мере необходимости
# в вашем собственном классе синглтона.