#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Часть 2. Модуль 16. Практическая работа. Задача 2. Функция обратного вызова
#
# При работе с сетью и веб-сервисами иногда используется функция callback,
# так называемая функция обратного вызова. Это функция, которая вызывается при срабатывании
# определённого события: переходе на страницу, получении сообщения или окончании обработки процессором.
# В неё можно передать функцию, чтобы она выполнилась после определённого события.
# Это используется, например, в HTTP-серверах в ответ на URL-запросы. Реализуйте такую функцию.
#
# Пример функции:
#
# @callback('//')
# def example():
#     print('Пример функции, которая возвращает ответ сервера')
#     return 'OK'
#
# Основной код:
# route = app.get('//') - тут явно к экземпяру класса App применяется его метод get
# if route:
#     response = route()
#     print('Ответ:', response)
# else:
#     print('Такого пути нет')
#
# Ожидаемый результат: пример функции, которая возвращает ответ сервера.
# Ответ: OK.
#
# Подсказка: функция callback, в зависимости от условия, может быть вызвана следующим действием или просто так.
#
# Что оценивается в задаче
# Результат вычислений корректен.
# Формат вывода соответствует примеру.
# Переменные, функции и собственные методы классов имеют значащие имена (не a, b, c, d).
# Классы и методы (функции) имеют прописанную документацию.
# Есть аннотация типов для методов (функций) и их аргументов, кроме args и kwargs.
# Если функция или метод ничего не возвращает, то используется None.



import functools
from collections.abc import Callable


app = {}    # словарь app для хранения функций, связанных с определенными ключами маршрутов.


def callback(key: str):
    """
    Декоратор callback принимает ключ (строку) в качестве аргумента
    и возвращает функцию callback_decorator.
    :param key:
    :return:
    """
    def callback_decorator(func: Callable):
        # Вложенная функция callback_decorator принимает функцию func в качестве аргумента.
        # Сохраняет эту функцию в словаре app по ключу, который был передан при вызове декоратора callback.
        app[key] = func
        @functools.wraps(func)
        def callback_decorator_wrapper(*args, **kwargs):
            return func(*args, **kwargs)
        return callback_decorator_wrapper
    return callback_decorator

# Определяется функция example. Она декорируется с помощью @callback('//'),
@callback('//')     # Функция example связывается с ключом '//' и сохраняется в словаре app.
def example():
    print('Пример функции, которая возвращает ответ сервера')
    # может быть заменено на реальные действия, выполняемые при обработке запросов сервера.
    return 'OK'


route = app.get('//')    # попытка получить значение из словаря app по ключу '//' с помощью метода get()
# Проверяем наличие функции в словаре app по ключу '//'.
if route:
    # Если такая функция найдена, она вызывается, и результат сохраняется в переменной response.
    response = route()
    print('Ответ:', response)
else:
    # Если ключ не найден в словаре, выводится сообщение о том, что такого пути нет.
    print('Такого пути нет')
