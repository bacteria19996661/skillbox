periods = {
    ('2022-06-01 00:00:00', '2022-12-31 23:59:59'): (
    5119, 3714, 9171, 3569, 4297, 3031, 3174, 3339, 3507, 4022, 5787, 7266, 7825, 5515, 7652, 7101, 31435, 30533, 32502,
    29782, 30451, 29586, 29733, 30126, 30371, 30069, 27955, 25961, 25719, 26682, 25551, 25000, 24329, 23812, 25642,
    23634, 23513, 22270, 21759, 21386),
    ('2023-01-01 00:00:00', '2023-01-31 23:59:59'): (
    5576, 3083, 3748, 117427, 9397, 3232, 5360, 3926, 3500, 6627, 24466, 6809, 4074, 265769, 3918),
    ('2023-02-01 00:00:00', '2023-02-28 23:59:59'): (12319, 11966, 109755, 3740, 3564, 19639, 268564, 281037, 4792),
    ('2023-03-01 00:00:00', '2023-03-31 23:59:59'): (
    10100, 9835, 6827, 3761, 8790, 4091, 3599, 264085, 263280, 8626, 3331)
}

def temp_calculate_average(time_dict):
    time_dict = {key: (sum(val), len(val)) for key, val in time_dict.items() for _ in val}
    return time_dict


def calculate_average(time_dict):
    summ, n = 0, 0

    for val in time_dict.values():
        summ += val[0]
        n += val[1]

    try:
        average = summ/n
    except ZeroDivisionError:
        return 0

    return average


def test_calculate_average():
    # Тестовый случай 1: Словарь periods содержит одну пару
    periods = {('2022-06-01 00:00:00', '2022-12-31 23:59:59'): (10, 20, 30, 40, 50, 60)}
    expected_average = 35.0
    assert calculate_average(temp_calculate_average(periods)) == expected_average

    # Тестовый случай 2: Словарь periods содержит несколько пар с разным количеством элементов.
    periods = {
    ('2022-06-01 00:00:00', '2022-12-31 23:59:59'): (10, 20, 30, 40, 50, 60),
    ('2023-01-01 00:00:00', '2023-01-31 23:59:59'): (15, 25, 35, 45),
    ('2023-02-01 00:00:00', '2023-02-28 23:59:59'): (10, 0, 50)
}
    expected_average = 30.0
    assert calculate_average(temp_calculate_average(periods)) == expected_average

    # Тестовый случай 3: Словарь periods содержит пустые кортежи.
    periods = {
    ('2022-06-01 00:00:00', '2022-12-31 23:59:59'): (),
    ('2023-01-01 00:00:00', '2023-01-31 23:59:59'): (),
    ('2023-02-01 00:00:00', '2023-02-28 23:59:59'): (),
    ('2023-03-01 00:00:00', '2023-03-31 23:59:59'): ()
}
    expected_average = 0  # Пустые кортежи не влияют на среднее значение.
    assert calculate_average(temp_calculate_average(periods)) == expected_average

    # Тестовый случай 4: Словарь periods содержит отрицательные значения.
    periods = {
    ('2022-06-01 00:00:00', '2022-12-31 23:59:59'): (10, -20, 30, -40, -50, 60),
    ('2023-01-01 00:00:00', '2023-01-31 23:59:59'): (15, -25, 35, 65),
    ('2023-02-01 00:00:00', '2023-02-28 23:59:59'): (0, -50)
}
    expected_average = 2.5
    assert calculate_average(temp_calculate_average(periods)) == expected_average

    # Тестовый случай 5: Список periods содержит только нулевые значения.
#     periods = {
#     ('2022-06-01 00:00:00', '2022-12-31 23:59:59'): (0, 0, 0, 0, 0, 0),
#     ('2023-01-01 00:00:00', '2023-01-31 23:59:59'): (0, 0),
#     ('2023-02-01 00:00:00', '2023-02-28 23:59:59'): (0),
#     ('2023-03-01 00:00:00', '2023-03-31 23:59:59'): (0, 0, 0)
# }
#     expected_average = 0  # Сумма нулей равна нулю, количество элементов равно количеству нулей.
#     assert calculate_average(temp_calculate_average(periods)) == expected_average

    print("Все тестовые случаи успешно пройдены.")


if __name__ == '__main__':
    # Запуск тестовых случаев.
    test_calculate_average()


    # Проверка промежуточны значений.
    # for i, v in temp_calculate_average(periods).items():
    #     print(i, v)

    # Основной код.
    result_average = calculate_average(temp_calculate_average(periods))
    print(f"Среднее арифметическое: {result_average} ms.")
